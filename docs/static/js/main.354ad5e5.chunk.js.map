{"version":3,"sources":["Form.jsx","ResultFile.jsx","ResultShow.jsx","App.js","index.js"],"names":["data_list","fileReaderOnload","event","result","target","console","log","parsed_result","match","ptr","length","i","data","push","Form","type","accept","onChange","file","files","reader","FileReader","onload","readAsText","id","name","value","onClick","e","preventDefault","csvDownload","mockData","ResultDownload","Chart","labels","datasets","label","backgroundColor","hoverOffset","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAGMA,EAAW,GAEXC,EAAmB,SAACC,GACtB,IACQC,EADWD,EAAXE,OACAD,OAERE,QAAQC,IAAI,WAEZ,IAAIC,EAAgBJ,EAAOK,MAAM,+BAC7BC,EAAM,EACVJ,QAAQC,IAAIC,EAAcG,QAC1B,IAAK,IAAIC,EAAE,EAAGA,EAAEJ,EAAcG,OAAQC,IACpC,GAA0B,OAAtBJ,EAAcE,GAAe,CAC/B,IAAMG,EAAO,CAAC,SAAWL,EAAcE,GAAK,QAAUF,EAAcE,EAAI,GAAG,WAAaF,EAAcE,EAAI,GAAG,OAASF,EAAcE,EAAI,GAAG,IAAMF,EAAcE,EAAI,IACnKT,EAAUa,KAAKD,GACfH,GAAY,MACP,IAA0B,OAAtBF,EAAcE,GAKvB,SAJA,IAAMG,EAAO,CAAC,SAAWL,EAAcE,GAAK,QAAUF,EAAcE,EAAI,GAAG,WAAaF,EAAcE,EAAI,GAAG,OAAS,GAAG,IAAMF,EAAcE,EAAI,IACjJT,EAAUa,KAAKD,GACfH,GAAY,EAKhBJ,QAAQC,IAAIN,IAsCDc,EAzBF,WAWT,OACI,iCACI,uBAAOC,KAAK,OAAOC,OAAO,OAAOC,SAZtB,SAACf,GAChB,IAEMgB,EAFahB,EAAXE,OACAe,MACW,GAEbC,EAAS,IAAIC,WACnBD,EAAOE,OAASrB,EAChBmB,EAAOG,WAAWL,IAKyCM,GAAG,WAAWC,KAAK,aAAa,uBACvF,uBAAOV,KAAK,SAASW,MAAM,WAC3B,wBAAQC,QAAS,SAACC,GACdA,EAAEC,iBACFC,IAAY9B,IAFhB,+BCrDN+B,EAAW,CAAC,CAAC,KAAO,KAAK,KAAO,UAAU,CAAC,KAAO,KAAK,KAAO,WAarDC,EAZQ,WACnB,OACI,+BACI,wBAAQL,QAAS,SAACC,GACdA,EAAEC,iBACFC,IAAYC,IAFhB,mC,QCoBGE,EAxBD,WAmBV,OACI,cAAC,IAAD,CAAUrB,KAnBD,CACTsB,OAAQ,CACN,MACA,OACA,UAEFC,SAAU,CAAC,CACTC,MAAO,mBACPxB,KAAM,CAAC,IAAK,GAAI,KAChByB,gBAAiB,CACf,oBACA,oBACA,qBAEFC,YAAa,QCDRC,EAXH,WACV,OACE,sBAAKC,UAAU,MAAf,4DACmB,cAAC,EAAD,IADnB,uBAEY,cAAC,EAAD,IAFZ,6BAGQ,cAAC,EAAD,QCLZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.354ad5e5.chunk.js","sourcesContent":["import csvDownload from 'json-to-csv-export'; //@\r\n\r\n\r\nconst data_list =[] \r\n\r\nconst fileReaderOnload = (event) => {\r\n    const { target } = event;\r\n    const { result } = target; \r\n    // console.log(typeof(result)) // -> string \r\n    console.log('onload!');\r\n   \r\n    var parsed_result = result.match(/[a-zA-Z0-9\\.\\:\\[\\]\\*\\_\\%]+/g); \r\n    var ptr = 1\r\n    console.log(parsed_result.length)\r\n    for (var i=0; i<parsed_result.length; i++){\r\n      if (parsed_result[ptr] == \"TCP\") { \r\n        const data = {'protocol':parsed_result[ptr],'localIP':parsed_result[ptr+1],'externalIP':parsed_result[ptr+2],'status':parsed_result[ptr+3],'PID':parsed_result[ptr+4]}\r\n        data_list.push(data)\r\n        ptr = ptr + 5\r\n      } else if (parsed_result[ptr] == \"UDP\") {\r\n        const data = {'protocol':parsed_result[ptr],'localIP':parsed_result[ptr+1],'externalIP':parsed_result[ptr+2],'status':'','PID':parsed_result[ptr+3]}\r\n        data_list.push(data)\r\n        ptr = ptr + 4\r\n      } else {\r\n        continue\r\n      }\r\n    }\r\n    console.log(data_list)\r\n\r\n    // (질문)\r\n    // line8 - result대신 text라고 변수명 바꾸니까 동작 안하는이유 (undefinded)\r\n    // line11 - javascript에서는 const result에서 const 안써도 동작했는데 React에서는 var, const를 명시해야하나 (오류발생)\r\n    // line16 - ==와 ===의 차이점? ==쓰니까 ===를 기대했다고 함\r\n    // 다른 jsx 파일에 있는 const 변수는 못불러오나 (data_list를 ResultFile.jsx에 넘겨서 나중에 다른 데이터와 같이 다운로드 하고싶음)\r\n\r\n    // (참고문헌)\r\n    // 정규표현식 match함수 g옵션 : 모든 문자열 반환 //https://velog.io/@sso/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-Regular-Expressions \r\n\r\n}\r\n\r\nconst Form = () => {\r\n    const hanldeFile = (event) => {\r\n        const { target } = event;\r\n        const { files } = target;\r\n        const file = files[0];\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = fileReaderOnload;\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <input type=\"file\" accept=\".txt\" onChange={hanldeFile} id=\"username\" name=\"username\" /><br />\r\n            <input type=\"submit\" value=\"Submit\" />\r\n            <button onClick={(e) => {\r\n                e.preventDefault();\r\n                csvDownload(data_list); \r\n            }}>Download Data</button>\r\n        </form>           \r\n            \r\n    )\r\n};\r\n\r\n\r\nexport default Form;\r\n","import csvDownload from 'json-to-csv-export';\r\n\r\nconst mockData = [{'test':'is','good':'foryou'},{'test':'is','good':'foryou'}];\r\nconst ResultDownload = () => {\r\n    return (\r\n        <form>\r\n            <button onClick={(e) => {\r\n                e.preventDefault();\r\n                csvDownload(mockData); // mockData\r\n            }}>Download mock Data</button>\r\n        </form>    \r\n            \r\n    )\r\n};\r\n\r\nexport default ResultDownload;","import { Doughnut } from 'react-chartjs-2';\r\n\r\nconst Chart = () => {\r\n    const data = {  // data \r\n        labels: [\r\n          'Red',\r\n          'Blue',\r\n          'Yellow'\r\n        ],\r\n        datasets: [{\r\n          label: 'My First Dataset',\r\n          data: [300, 50, 100],\r\n          backgroundColor: [\r\n            'rgb(255, 99, 132)',\r\n            'rgb(54, 162, 235)',\r\n            'rgb(255, 205, 86)'\r\n          ],\r\n          hoverOffset: 4\r\n        }]\r\n      }\r\n    \r\n    return (\r\n        <Doughnut data={data} />  \r\n    )\r\n};\r\n\r\nexport default Chart;","import Form from './Form'\nimport ResultDownload from './ResultFile'\nimport Chart from './ResultShow'\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      네트워크 정보 upload : <Form />\n      csv 예시  : <ResultDownload />\n      분석 요약 <Chart />  \n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}